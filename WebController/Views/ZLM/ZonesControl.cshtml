@using System.Drawing
@using System.Dynamic
@using System.Web.UI.WebControls
@using ZoneLighting.ZoneProgramNS
@model ZoneLighting.ZLM
@using (Ajax.BeginForm(new AjaxOptions { UpdateTargetId = "ZonesControl" }))
{
	<script type="text/javascript">
		@*$(document).ready(function() {
			$(".setzone").click(function() {
				var url = '@Url.Action("SetZoneColor", "ZLM", new {zoneName = , color = ""})';
				$.get(url, null, function(data) {
					$("#result").html(data);
				});
			});*@




			@*$("#btnUninit").click(function () {
            var url = "@Url.Action("UninitializeZLM", "ZLM")";
            $.get(url, null, function (data) {
                $("#result").html(data);
            });
        });*@




		//});

		function setColor(zoneName, color, brightness) {
			var url = '@Url.Action("SetZoneColor", "ZLM")' + "?zoneName=" + zoneName + "&color=" + color + "&brightness=" + brightness;
			$.get(url, null, function (data) {
				$("#result").html(data);
			});
		}
	</script>

	<div class="row">
		<div class="col-lg-12">
			<div class="panel panel-primary">
				<div class="panel-heading">
					<h3 class="panel-title">
						<i class="fa fa-bar-chart-o"></i> Zones
					</h3>
				</div>
				<div class="panel-body">
					<table class="table table-striped table-hover">
						<thead>
							<tr>
								<th>Name</th>
								<th>Program</th>
								<th>Running</th>
								<th># Lights</th>
								<th>Set Color</th>
							</tr>
						</thead>
						<tbody>
							@if (Model.Zones != null)
							{
								foreach (var zone in Model.Zones)
								{
									<tr>
										<td>@zone.Name</td>
										<td>@zone.ZoneProgram</td>
										<td>@zone.Running</td>
										<td>@zone.LightCount</td>
										<td>
											<div class="form">
												<div class="form-group">
													<select class="form-control" onchange="setColor('@zone.Name', this.value, this.nextElementSibling.value)" style="display: inline-flex; width: inherit;">
														@{
															var knownColors = Enum.GetValues(typeof(KnownColor)).Cast<KnownColor>().ToList();
															var colors = knownColors.Select(Color.FromKnownColor).ToList();

															foreach (var knownColor in knownColors)
															{
																var color = Color.FromKnownColor(knownColor);

																if (typeof(SystemColors).GetProperties().Select(p => p.Name).Contains(color.Name))
																{
																	colors.RemoveAll(c => c.Name == color.Name);
																}
															}

															foreach (var color in colors.OrderBy(c => c.Name))
															{
																<option value="@color.Name">@color.Name</option>
															}
														}
													</select>
													<input type="number" value="0.5" step="0.1" onchange=" setColor('@zone.Name', this.previousElementSibling.value, this.value) " max="1.0" min="0.0" class="form-control inTable" />
													<input type="button" value="Set" onclick="setColor('@zone.Name', this.previousElementSibling.previousElementSibling.value, this.previousElementSibling.value)" class="form-control btn btn-primary inTable"/>
												</div>
											</div>
										</td>
									</tr>
																}
															}
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-lg-12">
			<div class="panel panel-primary">
				<div class="panel-heading">
					<h3 class="panel-title">
						<i class="fa fa-bar-chart-o"></i> Program Sets
					</h3>
				</div>
				<div class="panel-body">
					<table class="table table-striped table-hover">
						<thead>
							<tr>
								<th>Name</th>
								<th>Program</th>
								<th>State</th>
								<th>Action</th>
							</tr>
						</thead>
						<tbody>
							@if (Model.ProgramSets != null)
							{
								foreach (var programSet in Model.ProgramSets)
								{
									<tr>
										<td class="@(programSet.State == ProgramState.Started ? "on" : "")">@programSet.Name</td>
										<td class="@(programSet.State == ProgramState.Started ? "on" : "")">@programSet.ProgramName</td>
										<td class="@(programSet.State == ProgramState.Started ? "on" : "")">@programSet.State</td>
										<td class="@(programSet.State == ProgramState.Started ? "on" : "")">
											@if (programSet.State == ProgramState.Stopped)
											{
												@Html.ActionLink("Start", "ZLMCommand", "ZLM", new { Command = "Start " + programSet.Name }, new { @class = "form-control btn btn-primary inTable" })
											}
											else
											{
												@Html.ActionLink("Stop", "ZLMCommand", "ZLM", new { Command = "Stop " + programSet.Name }, new { @class = "form-control btn btn-primary inTable" })												
											}
										</td>
									</tr>
								}
							}
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
															}
